#!/bin/bash

declare -r cmd=$0
declare -r message=$1
declare -r reviewer=$2
declare -r current_branch="$(git symbolic-ref HEAD 2> /dev/null | cut -d'/' -f3)"

if [ -z "$message" ] ; then
  echo "Send a diff for review of any staged or unstaged changes, and"
  echo "creates a branch from the commit message."
  echo
  echo "Usage:"
  echo
  echo "  $cmd <message> [<reviewer>]"
  echo
  echo "Create or update a Phabricator Differential (code review)."
  echo
  echo "To create a new review, be on master with uncommitted"
  echo "changes in the git repository, and run"
  echo
  echo "  $cmd 'Commit message here' myreviewer"
  echo
  echo "To update an existing diff, be on the diff branch and run"
  echo
  echo "  $cmd 'Tweaked comments'"
  echo
  echo "which will update the existing diff, adding the supplied message."
  exit 1
fi

if [ -z "$(git diff HEAD --shortstat)" ] ; then
  echo 'ERROR: No changes in working tree; cowardly refusing to continue.'
  exit 1
fi

if [ -z "$reviewer" ] ; then
  echo "$cmd: Updating existing diff with message: $message..."
  if [[ $current_branch == 'master' ]] ; then
    echo "$cmd: ERROR: Can't update a diff on master; did you forget a"
    echo "$cmd:        reviewer or forget to switch to a branch?"
    exit 1
  fi
  git commit -a -m "$message"
  arc diff --nounit --verbatim --allow-untracked --message "$message"
  exit 0
fi

# Make a branch name from the commit message; for example
#
#  Extend the fooBar to handle "Stuff"
#
# becomes
#
#  extend-the-foobar-to-handle-stuff
#
declare -r branch_name=$(
    echo "$message"       |
    tr A-Z a-z            |
    sed -e 's/[^a-z]/-/g' |
    sed -e 's/--*/-/g'    |
    sed -e 's/^-//'       |
    sed -e 's/-$//'       )

echo "$cmd: Creating new diff with message: $message..."

# Use git stash instead of checkout -b to support added but not committed files.
git stash
git checkout -b $branch_name
git stash apply

git commit -a -m "$message"
arc diff --nolint --nounit --verbatim --allow-untracked --reviewers $reviewer
